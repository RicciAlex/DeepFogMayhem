//==============================================================================
//
// readmeファイル [readme.txt]
// Author : Ricci Alex
//
// 最終更新日 : 2023/03/08
//==============================================================================

作品を見てくださりありがとうございます。

◆このディレクトリについて◆
ディレクトリ構成図は以下のようになっています。
.
┃
┣ ━01_実行ファイル
┣━ 02_開発環境
┣━ 03_スクリーンショット
┣━ 04_作品アピールシート
┣━ 05_動画リンク
┗━ readme.txt

◆01_実行ファイル
作品の実行ファイルが入っております。

・概要	
タイトル: Gimmick Party
使用言語 : C++
開発期間 : 2022年10月～2022年11月(3週間)
ジャンル : 3Dアクションゲーム

・操作説明
ゲームパッドで4人同時プレイができます。キーボードではプレイヤー1のみ操作が可能です。

キーボードの操作:
WASDキー			移動
エンターキー		決定
バックスペースキー	戻る
Vキー				攻撃
スペースキー		ジャンプ
Pキー				ポーズ

・説明
C++で作ったチーム制作です。
3Dと関係があるもののクラス化はまだ出来ていませんでしたので、
制作時間が少なかったですので、チームで話し合ってから、
マリオパーティーのミニゲームをもとにしてゲームを作ることにしました。
ステージ3つありまして、プレイヤーの色とスキンを選択出来ます。
ゲームの目的は障害物をかわしながら、コインを集まることです。
障害物の種類が多いですし、他のプレイヤーが攻撃できますので、
パーティーゲームとして面白いと思います。

・工夫した点・苦労した点
3Dアニメーション:
前C言語で作った3Dアクションゲームにアニメーションを追加できましたが、クラス化まだ出来ていませんでした。
それでできるだけ早く3Dアニメーション用のクラスを作って、実装しました。
まだ調整できるところがあると思いますが、担当者は全部のアニメーションが問題なく作れましたので、
結局そんなに頑張って良かったと思います。

当たり判定:
一番時間がかかった処理は間違いなく当たり判定の処理でした。
モデルの頂点数が多かったですので、たまにゲームが重くなることがありました。
それで判定しないといけないインスタンスだけを判定するようにしました。

プレイヤーのモデルの変更:
プレイヤー選択画面でプレイヤーの色とスキンが選べます。それを作るのにかなり時間がかかりましたが、
モデルが違うと印象が全然違うと思いますので、挑戦して、作ってみました。
結局少し工夫したら、影の描画のような方法を使って、出来ました。


・反省点
当たり判定:
当たり判定のクラスはかなり使いづらいと思います。更新処理があまり良くないと思いますので、
調整できると思います。特にオブジェクトの回転を入れると、押し出されないこともありましたので、
回転する障害物を入れないことにしました。これからそれも作ろうと思っていますが、この作品の制作時間が
足りませんでした。

影の表示:
この作品の影は平面投影方法を使いますので、様々な問題があります。影が浮いている時もありますし、
消えることもあります。一般的に良く表示されていますが、地面の辺の近くにその問題が起きることが多いです。
それを解決するためには、シェーダーを使うことができますが、シェーダーを使ったことがありませんでしたので、
解決できませんでした。今少しずつシェーダーの使い方を勉強しておりますので、次の3D作品で使えるように
なりたいと思います。

説明:
学校内で開催された展示会の時に気づきましたが、コインの説明を入れるのを忘れてしまいました。
それにステージ選択画面の操作説明もありませんでしたので、早く気づいたほうが良かったと思います。

◆担当箇所
このチーム制作のメインプログラマーでしたので、多くの物理と関係がある処理を作りました。
特に当たり判定を作りました。(hitbox.cpp , CylinderHitbox.cpp , BoxHitbox.cpp)
それに多くの障害物を作りました。私が作ったのは落石、つららをスポーンするオブジェクトです。
(fallingStone.cpp , icePillar.cpp , stoneSpawner.cpp , icePillarSpawner.cpp)
次は溶岩(lavaFloor.cpp)、鉄球(spikeBall.cpp)とトランポリン(trampoline.cpp)を作りました。
メッシュフィールドを作ったら、斜めの当たり判定にかなり頑張りました。(meshfield.cpp)
それに影を描画するために平面投影方法を使いましたので、斜めの面に立つとき、影がめり込んでしまう問題を
ステンシルバッファを使いまして、解決できました。(silhouette.cpp)
2Dポリゴンを作るためにもかなり頑張りました。実は前作った2Dシューティングゲームとほぼ同じですが、
少し使いやすくするしたと思います。(object2D.cpp)

◆02_開発環境
プロジェクト一式を格納しております。

◆03_スクリーンショット
ゲームのスクリーンショット複数が入っております。

◆04_作品アピールシート
ゲームの簡単な紹介と力を入れたところをまとめたPDFファイルが入っております。

◆05_動画リンク
テキストファイルの中にゲームの動画のYouTubeリンクがございます。

◇readme.txt
このファイルです。ディレクトリ構成とディレクトリの内容といった
最初に知っていただきたい情報を記載しております。
